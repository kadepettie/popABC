params{
  download{
    abc_git = "https://github.com/kadepettie/ABC-Enhancer-Gene-Prediction.git"
    genrich_git = "https://github.com/jsh58/Genrich.git"
    // below download params only necessary if downloading from gdrive
    gdrive_name = "" // google drive name set up for use in rclone
    gdrive_dir = "" // path from gdrive root directory to directory with tarred ATAC bam files
    tardir_root = "" // name of directory within tarball containing ATAC bam files
  }
  outdir = 'output'
  mode = "all" // all, model

  git_dir = "/path/to/popABC" // directory with all popABC pipeline repos and code
  bin = "${git_dir}/selection_1000G"
  abc_code = "${git_dir}/ABC-Enhancer-Gene-Prediction" // contains environment .yaml and src directory
  plotdir = "${git_dir}/plotting"

  chrsize = "" // file with tab-separated chromosome names and sizes (e.g., chr1    249250621)
  chrsizebed = "" // bed-formatted chrsize file (e.g., chr1    0    249250621)
  blocklist = "${abc_code}/reference/wgEncodeHg19ConsensusSignalArtifactRegions.bed"
  promoters = "${abc_code}/reference/RefSeqCurated.170308.bed.CollapsedGeneBounds.TSS500bp.bed"
  genes = "${abc_code}/reference/RefSeqCurated.170308.bed.CollapsedGeneBounds.bed"
  ubiquitous = "${abc_code}/reference/UbiquitouslyExpressedGenesHG19.txt"
  // <hgnc_symbol>  <median_tpm> (for defining expressed genes in relevant cell type)
  expression = "${abc_code}/reference/Geuvadis_LCLs.medianRPKM.txt"

  genrich_bin = "${git_dir}/Genrich"
  atac_bamdir = "" // directory with mapped ATAC bam files to start from instead of downloading from gdrive (leave blank to download)
  pred_glob = "" // "/previous/pipeline/execution/outdir/neighborhoods/*_rep{1,2}/*List.txt"
  // hic bedpe format:    chr1 start1 end1 chr2 start2 end2 name count
  // hichip bedpe format: chr1 start1 end1 chr2 start2 end2 count
  hicpro_matrix_dir = "/path/to/hichip/matrix/separate_reps/raw/*_5000{\\.,_}*" // matches pattern of matrix resolution desired for bedpe generation if starting with HiC/HiChIP data from hicpro matrix output (matches root of ATAC sample)
  hic_dir = "" // contains subdirectory for each chromosome containing bedpe file (same per sample)
  hic_type = 'bedpe' // ['bedpe','juicebox']
  hichip = true // true if hic_dir contains hichip data (must be bedpe format)
  power_law = false // run predict.py with power law contact score only (in addition to HiC if directory given)
  window = 5000000 // # of bp around each gene to compute scores on for enhancers
  atac_glob = "{CEU,FIN,IBS,TSI,ESN,GWD,LWK,YRI}_rep*" // feeds into namesort process
  group_regex = [ '/(ESN|GWD|LWK|YRI).*/',
                  '/(CEU|FIN|IBS|TSI).*/' ]
  group_names = [ 'AFR',
                  'EUR' ]
  samcores = 16
  qnorm_refs = "" // ['YRI_rep1', 'CEU_rep1'] // empty for no qnorm
  qnorm_refs_hic = ['YRI_rep1', 'IBS_rep1'] // specify even if not performing qnorm for sample origin matching
  mean_qn = true
  // set diff_scores = "" to generate these files with diffABC.R
  diff_scores = ""
  // diff_scores = ['/previous/pipeline/execution/output/diffABC/HiChIP/allZerosFilt.meanQN.16.AFR_EUR.diff.ABC.Score.txt.gz',
  //                '/previous/pipeline/execution/output/diffABC/HiChIP/allZerosFilt.meanQN.16.AFR_EUR.diff.atac.Score.txt.gz',
  //                '/previous/pipeline/execution/output/diffABC/HiChIP/allZerosFilt.meanQN.16.AFR_EUR.diff.chip.Score.txt.gz',
  //                '/previous/pipeline/execution/output/diffABC/HiChIP/allZerosFilt.meanQN.16.AFR_EUR.diff.hic.Score.txt.gz']
  score_types = ['ABC.Score', 'chip.Score', 'hic.Score', 'atac.Score'] // 'activity.Score'
  enhancer_threshold = 0.015
  promoter_threshold = 0.1
  min_nonzero_hic = 16 // Number of samples with non-zero HiC/HiChIP contacts required to test E-G pair for diffABC
  de_datasets = [
    '/path/to/supp_data/diffexp/LeaEtAl2021_popDE.txt.gz',
    '/path/to/supp_data/diffexp/RandolphEtAl2021_popDE.txt.gz'
  ]
  ihs = "/path/to/supp_data/snpstats/JohnsonAndVoight2018_iHSscores_8pops_percentiles.txt.gz"
  fst = "/path/to/supp_data/snpstats/EUR_vs_AFR.ccres_shared_allsamps.fst.percentiles.txt.gz"
  // the following should all be tuples to combine on the first element of
  // conditions and cell types should correspond to values from those corresponding
  // columns in the datasets
  de_model_datasets = [
    ['LeaEtAl2021', '/path/to/supp_data/diffexp/LeaEtAl2021_popDE.txt.gz'],
    ['RandolphEtAl2021', '/path/to/supp_data/diffexp/RandolphEtAl2021_popDE.txt.gz']
  ]
  de_model_conditions = [
    ['LeaEtAl2021', ['ACRYL','BAFF','BPA','ETOH','FSL1','GARD','IFNG','IGF','PFOA','DEX','TUNIC','H20']],
    ['RandolphEtAl2021', ['NI', 'flu']]
  ]
  de_model_celltypes = [
    ['LeaEtAl2021', ['LCL']],
    ['RandolphEtAl2021', ['monocytes','CD8T','NK','CD4T','B']]
  ]
  de_model_pred = ['all', 'abc', 'chip', 'atac', 'self']
  de_model_response = ['de_sig', 'snltp_DE', 'beta']

}

// configured to run on Stanford's Sherlock compute cluster
// the software specified below are configured to run as
// Lmod modules, which can be set up in any Unix environment
process{
  module = 'conda/4.8.2'
  //errorStrategy = { task.exitStatus == 143 ? {sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry'} : 'ignore' } // does this work?
  errorStrategy = 'terminate'
  maxRetries = 2
  maxForks = 200
  stageInMode = 'rellink'
  queue = "hbfraser,hns,normal"
  withLabel: 'genrich'{
    module = 'biology:bedtools/2.30.0'
    cpus = 1
    time  = '8h'
  }
  withLabel: 'samtools'{
    module = 'biology:samtools/1.8'
    cpus = 16
    memory = '48G'
    time  = '8h'
  }
  withLabel: 'ccres'{
    module = 'biology:bedtools/2.30.0'
    cpus = 1
    memory = '4G'
    time  = '23h'
  }
  withLabel: 'predict'{
    module = 'biology:bedtools/2.30.0'
    cpus = 1
    memory = { 48.GB * task.attempt }
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
    maxRetries = 4
    time = '23h'
  }
  withLabel: 'qnorm'{
    cpus = 1
    memory = { 4.GB * task.attempt }
    time  = '2h'
  }
  withLabel: 'qnorm_hic'{
    cpus = 1
    memory = { 8.GB * task.attempt }
    time = '2h'
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
    maxRetries = 4
  }
  withLabel: 'mean_qnorm_hic'{
    module = 'math:R/4.0.2:biology:bedtools/2.30.0'
    cpus = 1
    memory = { 50.GB * task.attempt }
    time = { 12.h * task.attempt }
    errorStrategy = { task.exitStatus in 137..143 ? 'retry' : 'finish' }
    maxRetries = 2
  }
  withLabel: 'git'{
    module = 'system:git/2.12.2'
    cpus = 1
    memory = '4G'
    time  = '59m'
  }
  withLabel: 'rclone'{
    module = 'system:rclone'
    cpus = 1
    memory = '4G'
    time  = '3h'
  }
  withLabel: 'r'{
    module = 'math:R/4.0.2:biology:bedtools/2.30.0'
    memory = '4G'
    time  = '1h'
  }
  withLabel: 'bedpe'{
    module = 'math:R/4.0.2:biology:bedtools/2.30.0'
    memory = { 16.GB * task.attempt }
    time = '2h'
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'finish' }
    maxRetries = 4
  }
  withLabel: 'diff'{
    module = 'math:R/4.0.2:biology:bedtools/2.30.0'
    memory = '32G'
    time  = '12h'
  }
  withLabel: 'model'{
    module = 'math:R/4.0.2'
    memory = '12G'
    time  = '8h'
    errorStrategy = 'finish'
  }

}

executor{
  name = 'slurm'
  submitRateLimit = '2 sec'
  queueSize = 500
}

notification{
  enabled = false
  to = '' // your email address
}

timeline {
    enabled = true
    file = "./pipeline_info/timeline.html"
}

trace {
    enabled = true
    file = "./pipeline_info/trace.txt"
}

report {
    enabled = true
    file = "./pipeline_info/report.html"
}
