params{

  outdir = 'output'
  mode = "all" // all

  git_dir = "/path/to/popABC"
  bin = "${git_dir}/selection_1000G"
  plotdir = "${git_dir}/plotting"

  // directory with pre-LD-expanded bQTL in CREs for combining into single table
  // for GWAS overlap
  // ld-expanded bQTL generated as by-product of diffscore_gwasQTL.R 
  ldbqtl_dir = '/path/to/diffscore_gwasQTL/output'
  ldbqtl_pattern = 'expandLD.txt.gz'
  ldbqtl_grob = "${ldbqtl_dir}/*.${ldbqtl_pattern}"

  // directory with allele frequency info for each of 2 population groups
  // split by chromosome
  // by-product of vcf_allele_freq.nf pipeline
  frq_dir = '/path/to/vcf_allele_freq/output/frq_all'
  // allele frequency filename format must be: [(a|e)prefix].chr[N]
  aprefix = 'AFR'
  eprefix = 'EUR'
  frq_grob = "${frq_dir}/{${aprefix},${eprefix}}.chr*"
  
  // by-product of fst_subset_percentiles.nf pipeline
  fst_dir = '/path/to/fst_subset_percentiles/output/fst_all'
  // fst filename format must be (e.g.): [eprefix]_vs_[aprefix].chr[N].[fst_pattern]
  fst_pattern = 'fst.bed' // for channel grob and passing to script
  fst_prefix = "${eprefix}_vs_${aprefix}" // for channel grob and passing to script
  fst_grob = "${fst_dir}/${fst_prefix}.chr*.${fst_pattern}"

  // downloaded as tsv from this google sheet:
  // https://docs.google.com/spreadsheets/d/1kvPoupSzsSFBNSztMzl04xMoSC3Kcx3CrjVf4yBmESU/edit#gid=178908679
  // has wget commands for running in downloadUKBBphenotype.R
  ukbbmani_fname = '/path/to/ukbiobank/UKBB_GWAS_Imputed_v3_File_Manifest_Release_20180731_Manifest_201807.tsv'
  ukbb_suffix = '.gwas.imputed_v3.both_sexes.*tsv.bgz' // 5 files have 'varorder' where glob * is
  // permanent directory for storing each gwas phenotype results file to avoid
  // redownloading and possible duplicates taking up ~Tb of space
  ukbb_storedir = '/path/to/ukbiobank/individual_phenotypes/'

}

// configured to run on Fraser Lab compute cluster
// the software specified below are configured to run as
// Lmod modules, which can be set up in any Unix environment

process{
  errorStrategy = 'terminate'
  maxRetries = 2
  maxForks = 200
  stageInMode = 'rellink'
  withLabel: 'r'{
    module = 'R/4.1.0'
    memory = '4G'
    time  = '1h'
  }
  withLabel: 'concat'{
    module = 'R/4.1.0'
    memory = '4G'
    time  = '2h'
  }
  withLabel: 'overlap'{
    module = 'R/4.1.0'
    time  = '8h'
    memory = { 28.GB + (4.GB * task.attempt) }
    // memory = {12.GB * task.attempt}
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries = 3
  }

}

executor{
  name = 'slurm'
  submitRateLimit = '1 sec'
  queueSize = 500
}

notification{
  enabled = false
  to = '' // your email address
}
